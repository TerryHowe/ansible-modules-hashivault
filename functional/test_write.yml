---
- hosts: localhost
  gather_facts: no
  vars:
    namespace: ''
    name_root: '{{namespace}}basic'
    name_folder: '{{namespace}}stalks/bean'
    name_dict: '{{namespace}}_dict'
    name_array: '{{namespace}}_array'
    name_array_of_dicts: '{{namespace}}_array_of_dicts'
    name_ttls: '{{namespace}}_ttls'
    dict_value:
      foo: 'bar'
      baz: 'grunt'
    array_value:
      - 'one'
      - 'two'
      - 'three'
    array_of_dicts_value:
      - name: item-one
      - name: item-two
      - name: item-three

  tasks:
    - hashivault_delete:
        secret: '{{name_root}}'
    - hashivault_delete:
        secret: '{{name_folder}}'
    - hashivault_delete:
        secret: '{{name_ttls}}'
    - name: Write verify it succeeds
      hashivault_write:
        secret: '{{name_root}}'
        data:
            foo: 'foe'
            fie: 'fum'
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_root + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Write again no update verify changed
      hashivault_write:
        secret: '{{name_root}}'
        data:
          foo: 'foe'
          fie: 'fum'
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_root + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update again and verify no change
      hashivault_write:
        update: True
        secret: '{{name_root}}'
        data:
          foo: 'foe'
          fie: 'fum'
      register: vault_write
    - assert: { that: "vault_write is not changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update new value and detect change
      hashivault_write:
        update: True
        secret: '{{name_root}}'
        data:
          foo: 'new'
          fie: 'fum'
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_root + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update a brand new secret in folder
      hashivault_write:
        update: True
        secret: '{{name_folder}}'
        data:
          height: tall
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_folder + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Write secret dictionary
      hashivault_write:
        update: True
        secret: '{{name_dict}}'
        data: "{{ dict_value }}"
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update again secret dictionary and verify no change
      hashivault_write:
        update: True
        secret: '{{name_dict}}'
        data: "{{ dict_value }}"
      register: vault_write
    - assert: { that: "vault_write is not changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update new value in dictionary and detect change
      hashivault_write:
        update: True
        secret: '{{name_dict}}'
        data:
          foo: 'bar'
          baz: 'stuff'
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_dict + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Write array type secret
      hashivault_write:
        secret: '{{name_array}}'
        data:
            value: "{{array_value}}"

    - name: Write array of dicts secret
      hashivault_write:
        update: True
        secret: '{{name_array_of_dicts}}'
        data:
          value: "{{ array_of_dicts_value }}"
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update again array of dicts secret and verify no change
      hashivault_write:
        update: True
        secret: '{{name_array_of_dicts}}'
        data:
          value: "{{ array_of_dicts_value }}"
      register: vault_write
    - assert: { that: "vault_write is not changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Update new value in array of dicts and detect change
      hashivault_write:
        update: True
        secret: '{{name_array_of_dicts}}'
        data:
          value:
           - name: item-one
           - name: item-two
           - name: item-new
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.msg == 'Secret secret/' + name_array_of_dicts + ' written'" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Initial ttl values
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      36000s
          max_ttl: 480s
      register: vault_write
    - assert: { that: "vault_write is changed" }

    - name: Update minute ttl secret
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      600m
      register: vault_write
    - assert: { that: "vault_write is not changed" }

    - name: Update hour ttl secret
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      10h
      register: vault_write
    - assert: { that: "vault_write is not changed" }

    - name: Update second ttl secret
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      36000s
      register: vault_write
    - assert: { that: "vault_write is not changed" }

    - name: Update second ttl secret no s
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      36000
      register: vault_write
    - assert: { that: "vault_write is not changed" }

    - name: Update second ttl secret new value
      hashivault_write:
        update: True
        secret: '{{name_ttls}}'
        data:
          ttl:      36001s
      register: vault_write
    - assert: { that: "vault_write is changed" }

    - hashivault_delete:
        secret: '{{namespace}}no_log'

    - name: Write a secret to mess up no_log
      hashivault_write:
        update: True
        secret: '{{namespace}}no_log'
        data:
          zero: 0
          zero_str: "0"
          one: 1
          one_str: "1"
          false: False
          true: True
      register: vault_write
    - assert: { that: "vault_write is changed" }
    - assert: { that: "vault_write.rc == 0" }

    - name: Write a secret to mess up no_log again
      hashivault_write:
        update: True
        secret: '{{namespace}}no_log'
        data:
          zero: 0
          zero_str: "0"
          one: 1
          one_str: "1"
          false: False
          true: True
      register: vault_write
    - assert: { that: "vault_write is not changed" }
    - assert: { that: "vault_write.rc == 0" }
