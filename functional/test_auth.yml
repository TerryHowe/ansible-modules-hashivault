---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: List the authentications backends
      hashivault_auth_list:
      register: 'vault_auth_list'
    - block:
      - name: Enable userpass when it is already enabled
        hashivault_auth_enable:
          name: "userpass"
        failed_when: False
        register: 'vault_auth_enable'
      - assert: { that: "{{vault_auth_enable.changed}} == False" }
      - assert: { that: "{{vault_auth_enable.failed}} == False" }
      - assert: { that: "'{{vault_auth_enable.msg}}' == 'Exception: path is already in use'" }
      - assert: { that: "{{vault_auth_enable.rc}} == 1" }
      when: "'userpass/' in vault_auth_list.backends"
    - block:
      - name: Enable userpass auth for the first time
        hashivault_auth_enable:
          name: "userpass"
        register: 'vault_auth_enable'
      - assert: { that: "{{vault_auth_enable.changed}} == True" }
      - assert: { that: "{{vault_auth_enable.rc}} == 0" }
      when: "'userpass/' not in vault_auth_list.backends"
    - block:
      - hashivault_auth_enable:
          name: "userpass"
        register: 'vault_auth_enable_twice'
      - assert: { that: "{{vault_auth_enable_twice.changed}} == False" }
      - assert: { that: "{{vault_auth_enable_twice.rc}} == 0" }
    - block:
      - name: Enable userpass at a different mount point
        hashivault_auth_enable:
          name: "userpass"
          mount_point: "another-userpass"
        register: 'vault_auth_mount_point'
      - assert: { that: "{{vault_auth_mount_point.changed}} == True" }
      - assert: { that: "{{vault_auth_mount_point.rc}} == 0" }
        
