---
- hosts: localhost
  gather_facts: no
  tasks:
    - name: Delete any lingering userpass
      hashivault_auth_method:
        method_type: "userpass"
        state: disable
      failed_when: False
    - name: Enable userpass first time for this test
      hashivault_auth_method:
        method_type: "userpass"
        description: "my userpass"
      register: 'vault_auth'
    - assert: { that: "vault_auth is changed" }
    - assert: { that: "vault_auth.created == True" }
    - assert: { that: "vault_auth.failed == False" }
    - assert: { that: "vault_auth.rc == 0" }
    - name: Enable userpass when it is already enabled
      hashivault_auth_method:
        method_type: "userpass"
        description: "my userpass"
      register: 'vault_auth'
    - assert: { that: "vault_auth is not changed" }
    - assert: { that: "vault_auth.created == False" }
    - assert: { that: "vault_auth.failed == False" }
    - assert: { that: "vault_auth.rc == 0" }
    - name: Enable userpass auth for the third time with change
      hashivault_auth_method:
        method_type: "userpass"
        description: "our userpass"
      register: 'vault_auth'
    - assert: { that: "vault_auth is changed" }
    - assert: { that: "vault_auth.created == False" }
    - assert: { that: "vault_auth.rc == 0" }
    - name: Enable userpass at a different mount point
      hashivault_auth_method:
        method_type: "userpass"
        mount_point: "another-userpass"
      register: 'vault_auth_mount_point'
    - assert: { that: "vault_auth_mount_point is changed" }
    - assert: { that: "vault_auth_mount_point.rc == 0" }
